/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI;

import GUI.historialConsultasMedico;
import BO.CitaBO;
import BO.ConsultaBO;
import BO.MedicoBO;
import BO.PacienteBO;
import DTO.ConsultaViejaDTO;
import DTO.MedicoDTO;
import Entidades.Cita;
import Entidades.Medico;
import Entidades.Paciente;
import Exception.NegocioException;
import configuracion.DependencyInjector;
import java.time.format.DateTimeFormatter;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author sonic
 */
public class historialConsultas extends javax.swing.JFrame {

    private dashboardPaciente ventanaPaciente;
    private Paciente paciente;
    private CitaBO citaBO = DependencyInjector.crearCitaBO();
    private PacienteBO pacienteBO = DependencyInjector.crearPacienteBO();
    private ConsultaBO consultaBO = DependencyInjector.crearConsultaBO();
    private MedicoBO medicoBO = DependencyInjector.crearMedicoBO();

    ;

    /**
     * Creates new form historialConsultas
     */
    public historialConsultas(Paciente paciente) {
        this.paciente = paciente;
        initComponents();

        this.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowOpened(java.awt.event.WindowEvent e) {
                try {
                    cargarHistorialConsultas();
                } catch (NegocioException ex) {
                    JOptionPane.showMessageDialog(historialConsultas.this,
                            "Error al cargar consultas: " + ex.getMessage(), "Error",
                            JOptionPane.ERROR_MESSAGE);
                }
            }
        });
    }

    public void setVentanaPaciente(dashboardPaciente ventanaPaciente) {
        this.ventanaPaciente = ventanaPaciente;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        fieldEspecialidad = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        fechaHasta = new com.toedter.calendar.JDateChooser();
        fechaDesde = new com.toedter.calendar.JDateChooser();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        botonVolver = new javax.swing.JButton();
        listConsultas = new java.awt.List();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocationByPlatform(true);
        setMinimumSize(new java.awt.Dimension(632, 757));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        jLabel1.setText("HISTORIAL DE CONSULTAS");
        jLabel1.setToolTipText("");

        fieldEspecialidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fieldEspecialidadActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel3.setText("Filtrar por:");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel4.setText("Fecha");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel5.setText("Especialidad");

        jLabel6.setText("hasta");

        jLabel7.setText("desde");

        botonVolver.setText("Volver");
        botonVolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonVolverActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(botonVolver)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(fechaHasta, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)
                            .addComponent(fieldEspecialidad, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7)
                            .addComponent(fechaDesde, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6)
                            .addComponent(jLabel3)
                            .addComponent(listConsultas, javax.swing.GroupLayout.PREFERRED_SIZE, 932, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 51, Short.MAX_VALUE))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(268, 268, 268))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fieldEspecialidad, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fechaDesde, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fechaHasta, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(listConsultas, javax.swing.GroupLayout.DEFAULT_SIZE, 272, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(botonVolver, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void fieldEspecialidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fieldEspecialidadActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fieldEspecialidadActionPerformed

    private void botonVolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonVolverActionPerformed
        volverDashboardPaciente();
    }//GEN-LAST:event_botonVolverActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(historialConsultas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(historialConsultas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(historialConsultas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(historialConsultas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Paciente paciente = new Paciente();
                new historialConsultas(paciente).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonVolver;
    private com.toedter.calendar.JDateChooser fechaDesde;
    private com.toedter.calendar.JDateChooser fechaHasta;
    private javax.swing.JTextField fieldEspecialidad;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private java.awt.List listConsultas;
    // End of variables declaration//GEN-END:variables
// Vuelve a la ventana del dashboard del paciente

    public void volverDashboardPaciente() {
        // Si la ventana de dashboard no ha sido creada aún, la crea
        if (ventanaPaciente == null) {
            ventanaPaciente = new dashboardPaciente();
        }

        // Establece esta ventana como la ventana de historial de consultas
        ventanaPaciente.setVentanaHistorialConsultas(this);
        // Centra la ventana en la pantalla
        ventanaPaciente.setLocationRelativeTo(null);
        // Hace visible la ventana
        ventanaPaciente.setVisible(true);
        // Cierra la ventana actual
        this.dispose();
    }

// Carga el historial de consultas del paciente
    public void cargarHistorialConsultas() throws NegocioException {
        try {
            // Obtiene las consultas registradas del paciente
            List<ConsultaViejaDTO> consultas = consultaBO.historialConsultasPaciente(paciente);

            // Elimina cualquier ítem previamente agregado a la lista de consultas
            listConsultas.removeAll();

            // Si no hay consultas, muestra un mensaje de información y termina el método
            if (consultas.isEmpty()) {
                listConsultas.add("-- No hay consultas registradas --");
                JOptionPane.showMessageDialog(this,
                        "El paciente no tiene consultas registradas",
                        "Historial Vacío",
                        JOptionPane.INFORMATION_MESSAGE);
                return;
            }

            // Crea un formateador de fecha y hora para mostrar en el formato "dd/MM/yyyy HH:mm"
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm");

            // Itera a través de cada consulta y formatea la información
            for (ConsultaViejaDTO consulta : consultas) {
                String item;

                // Si la cita fue de tipo emergencia, muestra información adicional (folio de emergencia)
                if (consulta.getCita().getTipoCita() == Cita.TipoCita.EMERGENCIA) {
                    item = String.format("ID: %d | %s | Dr. %s %s | Diagnóstico: %s | Tratamiento: %s | Folio: %s | Estado: %s",
                            consulta.getIdConsulta(),
                            consulta.getFechaHora().format(formatter),
                            consulta.getCita().getMedico().getNombres(),
                            consulta.getCita().getMedico().getApellidoPaterno(),
                            consulta.getDiagnostico(),
                            consulta.getTratamiento(),
                            consulta.getCita().getEmergencia().getFolio(),
                            consulta.getCita().getEstado().getDescripcion());
                } else {
                    // Si la cita no es de emergencia, muestra solo la información básica
                    item = String.format("ID: %d | %s | Dr. %s %s | Diagnóstico: %s | Tratamiento: %s",
                            consulta.getIdConsulta(),
                            consulta.getFechaHora().format(formatter),
                            consulta.getCita().getMedico().getNombres(),
                            consulta.getCita().getMedico().getApellidoPaterno(),
                            consulta.getDiagnostico(),
                            consulta.getTratamiento());
                }

                // Agrega el ítem con la consulta formateada a la lista de consultas
                listConsultas.add(item);
            }

        } catch (NegocioException ex) {
            // Si ocurre un error relacionado con la lógica de negocio, muestra un mensaje de error
            JOptionPane.showMessageDialog(this,
                    "Error al cargar consultas: " + ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            // Si ocurre un error inesperado, muestra un mensaje de error crítico
            JOptionPane.showMessageDialog(this,
                    "Error inesperado: " + e.getMessage(),
                    "Error Crítico",
                    JOptionPane.ERROR_MESSAGE);
        }
    }
}
