/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI;

//import BO.ConsultaBO;
import BO.CitaBO;
import BO.ConsultaBO;
import DTO.CitaNuevaDTO;
import DTO.CitaViejaDTO;
import DTO.ConsultaNuevaDTO;
import DTO.ConsultaViejaDTO;
import DTO.MedicoDTO;
import Entidades.Cita;
import Exception.NegocioException;
import Exception.PersistenciaClinicaException;
import Mappers.CitaMapper;
import Mappers.ConsultaMapper;
import configuracion.DependencyInjector;
import java.sql.SQLException;
import java.time.LocalDateTime;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import GUI.iniciarSesion;

/**
 *
 * @author sonic
 */
public class panelDeConsulta extends javax.swing.JFrame {

    private ConsultaBO consultaBO;
    private CitaMapper mapperCita = new CitaMapper();
    private CitaViejaDTO citaActual;
    private MedicoDTO medico;
    private CitaBO citaBO;
    private agendaDeCitas ventanaAgendaDeCitas;
    private dashBoardMedico ventanaMedico;

    public panelDeConsulta(CitaViejaDTO cita, MedicoDTO medico) {
        initComponents();
        this.consultaBO = DependencyInjector.crearConsultaBO();
        this.citaBO = DependencyInjector.crearCitaBO();
        this.citaActual = cita;
        this.medico = medico;
    }

    public panelDeConsulta() {
        initComponents();
    }

    public void setVentanaMedico(dashBoardMedico ventanaMedico) {
        this.ventanaMedico = ventanaMedico;
    }

    public void setVentanaAgendaDeCitas(agendaDeCitas ventanaAgendaDeCitas) {
        this.ventanaAgendaDeCitas = ventanaAgendaDeCitas;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        fieldDiagnostico = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        fieldTratamiento = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        botonTerminarConsulta = new javax.swing.JButton();
        botonVolver = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(632, 757));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        jLabel1.setText("PANEL DE CONSULTA");
        jLabel1.setToolTipText("");

        fieldDiagnostico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fieldDiagnosticoActionPerformed(evt);
            }
        });

        jLabel3.setText("Diagnostico");

        fieldTratamiento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fieldTratamientoActionPerformed(evt);
            }
        });

        jLabel4.setText("Tratamiento");

        botonTerminarConsulta.setText("Terminar Consulta");
        botonTerminarConsulta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonTerminarConsultaActionPerformed(evt);
            }
        });

        botonVolver.setText("Volver");
        botonVolver.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                botonVolverMouseClicked(evt);
            }
        });
        botonVolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonVolverActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(158, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(127, 127, 127))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(botonTerminarConsulta, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(217, 217, 217))))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(botonVolver))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(78, 78, 78)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(fieldTratamiento, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(fieldDiagnostico, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(74, 74, 74)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fieldDiagnostico, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fieldTratamiento, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 172, Short.MAX_VALUE)
                .addComponent(botonTerminarConsulta, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(160, 160, 160)
                .addComponent(botonVolver, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void fieldDiagnosticoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fieldDiagnosticoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fieldDiagnosticoActionPerformed

    private void fieldTratamientoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fieldTratamientoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fieldTratamientoActionPerformed

    private void botonTerminarConsultaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonTerminarConsultaActionPerformed
        try {
            terminarConsulta();

// TODO add your handling code here:
        } catch (NegocioException ex) {
            Logger.getLogger(panelDeConsulta.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(panelDeConsulta.class.getName()).log(Level.SEVERE, null, ex);
        } catch (PersistenciaClinicaException ex) {
            Logger.getLogger(panelDeConsulta.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_botonTerminarConsultaActionPerformed

    private void botonVolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonVolverActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_botonVolverActionPerformed

    private void botonVolverMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botonVolverMouseClicked
        // TODO add your handling code here:

    }//GEN-LAST:event_botonVolverMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(panelDeConsulta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(panelDeConsulta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(panelDeConsulta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(panelDeConsulta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new panelDeConsulta().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonTerminarConsulta;
    private javax.swing.JButton botonVolver;
    private javax.swing.JTextField fieldDiagnostico;
    private javax.swing.JTextField fieldTratamiento;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    // End of variables declaration//GEN-END:variables
    // Método para terminar una consulta, registrando diagnóstico y tratamiento, y cambiando el estado de la cita

    private void terminarConsulta() throws NegocioException, SQLException, PersistenciaClinicaException {
        try {
            // Verifica que el diagnóstico y tratamiento no estén vacíos
            if (fieldDiagnostico.getText().isBlank() || fieldTratamiento.getText().isBlank()) {
                JOptionPane.showMessageDialog(this, "Diagnóstico y tratamiento son requeridos", "Error", JOptionPane.ERROR_MESSAGE);
                return; // Termina la ejecución si los campos están vacíos
            }

            // Crea un objeto DTO para la nueva consulta y asigna los valores del diagnóstico y tratamiento
            ConsultaNuevaDTO consultaDTO = new ConsultaNuevaDTO();
            consultaDTO.setDiagnostico(fieldDiagnostico.getText());
            consultaDTO.setTratamiento(fieldTratamiento.getText());
            consultaDTO.setFechaHora(LocalDateTime.now()); // Establece la fecha y hora actuales

            // Crea un objeto DTO para la cita asociada
            CitaViejaDTO citaDTO = new CitaViejaDTO();
            citaDTO.setIdCita(citaActual.getIdCita()); // Asocia la cita actual

            // Mapea la cita DTO a una entidad de tipo Cita
            Cita citaNueva = mapperCita.toEntityViejo(citaDTO);
            consultaDTO.setCita(citaNueva); // Asocia la cita a la consulta

            // Define el estado de la cita como "Confirmada"
            String estado = "Confirmada";

            // Cambia el estado de la cita a "Confirmada"
            boolean confirmacion = citaBO.cambiarEstadoCita(estado, citaNueva);

            // Si no se pudo cambiar el estado de la cita, muestra un mensaje de error
            if (!confirmacion) {
                JOptionPane.showMessageDialog(this, "Hubo un error al actualizar el estado de la cita.", "Error", JOptionPane.ERROR_MESSAGE);
                return; // Termina la ejecución si el cambio de estado falla
            }

            System.out.println("consultaDTO"); // Mensaje de depuración (puede eliminarse o mejorarse)

            // Inserta la nueva consulta en el sistema
            ConsultaViejaDTO resultado = consultaBO.insertarConsulta(consultaDTO);

            // Si la consulta se inserta correctamente, muestra un mensaje de éxito
            if (resultado != null) {
                JOptionPane.showMessageDialog(this, "Consulta registrada exitosamente");
                this.dispose(); // Cierra la ventana actual
            }

            // Redirige al médico al panel de inicio y dashboard médico
            iniciarSesion iniciarSesion = new iniciarSesion();
            ventanaMedico = new dashBoardMedico(medico);
            ventanaMedico.setVentanaInicio(iniciarSesion); // Establece la ventana de inicio
            ventanaMedico.setLocationRelativeTo(null); // Centra la ventana en la pantalla
            ventanaMedico.setVisible(true); // Muestra la ventana
        } catch (NegocioException | SQLException e) {
            // Si ocurre un error de negocio o de SQL, muestra el mensaje de error correspondiente
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
}
