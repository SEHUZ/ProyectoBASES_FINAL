/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI;

import BO.CitaBO;
import BO.ConsultaBO;
import BO.MedicoBO;
import BO.PacienteBO;
import DTO.CitaViejaDTO;
import DTO.MedicoDTO;
import configuracion.DependencyInjector;
import java.time.format.DateTimeFormatter;
import java.util.List;

/**
 *
 * @author sonic
 */
public class agendaDeCitas extends javax.swing.JFrame {
    
    private static agendaDeCitas instance;

    /**
     * Creates new form agendaDeCitas
     */
    
//    private MedicoBO medicoBO = DependencyInjector.crearMedicoBO();
//    private CitaBO citaBO = DependencyInjector.crearCitaBO();
//    private PacienteBO pacienteBO = DependencyInjector.crearPacienteBO();
//    private ConsultaBO consultaBO = DependencyInjector.crearConsultaBO();
//
//    public agendaDeCitas(MedicoDTO medico) {
//        initComponents();
//        cargarCitas();
//
//       
//    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 32767));
        jLabel1 = new javax.swing.JLabel();
        botonVolver = new javax.swing.JButton();
        botonIniciarConsulta = new javax.swing.JButton();
        botonHistorialPaciente = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(632, 757));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        jLabel1.setText("AGENDA DE CITAS");

        botonVolver.setText("Volver");
        botonVolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonVolverActionPerformed(evt);
            }
        });

        botonIniciarConsulta.setText("Iniciar Consulta");
        botonIniciarConsulta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonIniciarConsultaActionPerformed(evt);
            }
        });

        botonHistorialPaciente.setText("Ver historial del paciente");
        botonHistorialPaciente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonHistorialPacienteActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(245, 245, 245)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(botonVolver))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(228, 228, 228)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(botonIniciarConsulta, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(40, 40, 40)
                                .addComponent(botonHistorialPaciente)))))
                .addContainerGap(236, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addGap(87, 87, 87)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 388, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botonHistorialPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botonIniciarConsulta, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(53, 53, 53)
                .addComponent(botonVolver, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botonVolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonVolverActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_botonVolverActionPerformed

    private void botonIniciarConsultaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonIniciarConsultaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_botonIniciarConsultaActionPerformed

    private void botonHistorialPacienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonHistorialPacienteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_botonHistorialPacienteActionPerformed

    /**
     * @param args the command line arguments
     */
////    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(agendaDeCitas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(agendaDeCitas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(agendaDeCitas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(agendaDeCitas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new agendaDeCitas().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonHistorialPaciente;
    private javax.swing.JButton botonIniciarConsulta;
    private javax.swing.JButton botonVolver;
    private javax.swing.Box.Filler filler1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
//    private void cargarCitas() {
//        try {
//            // Obtener citas del m√©dico
//            List <CitaViejaDTO> citas = citaBO.consultarCitasMedico(medicoActual);
//            jComboBox1.removeAllItems();
//            for (citaViejaDTO) cita : citas) {
//                jComboBox1.addItem();
//        }
//            
//            // Formatear y agregar citas
//            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm");
//            for (CitaViejaDTO cita : citas) {
//                String entrada = String.format("[%s] %s - %s %s | Estado: %s",
//                        cita.getFechaHora().format(formatter),
//                        cita.getPaciente().getNombres(),
//                        cita.getPaciente().getApellidoPaterno(),
//                        cita.getPaciente().getApellidoMaterno(),
//                        cita.getEstado().getDescripcion());
//                list1.add(entrada);
//            }
//            
//        } catch (NegocioException ex) {
//            JOptionPane.showMessageDialog(this, 
//                    "Error al cargar citas: " + ex.getMessage(),
//                    "Error", 
//                    JOptionPane.ERROR_MESSAGE);
//        }
//    }
    
    
    
//    private void cargarMedicosPorEspecialidad() throws NegocioException {
//
//        try {
//            List<MedicoDTO> medicos = medicoBO.consultarMedicoPorEspecialidad(especialidad);
//            jComboBox1.removeAllItems();
//            for (MedicoDTO medico : medicos) {
//                jComboBox1.addItem(medico.getIdMedico() + " " + medico.getNombres() + " " + medico.getApellidoPaterno());
//            }
//        } catch (NegocioException ex) {
//            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
//        }
//        String seleccionado = (String) jComboBox1.getSelectedItem();
//        String[] partes = seleccionado.split(" ", 2); // Dividir solo en dos partes: ID y resto
//        int idMedico = Integer.parseInt(partes[0]); // Convertir la primera parte a entero
//        MedicoDTO medicoSELECCIONADO = medicoBO.consultarMedicoPorID(idMedico);
//
//        try {
//            List<HorarioMedicoNuevoDTO> horarios = medicoBO.obtenerHorariosMedico(medicoSELECCIONADO);
//
//            if (horarios.isEmpty()) {
//                jTextAreaHorarios.setText("El m√©dico no tiene horarios registrados");
//                return;
//            }
//
//            // Crear formateador para la hora
//            DateTimeFormatter formateadorHora = DateTimeFormatter.ofPattern("HH:mm");
//
//            // Construir el texto con formato
//            StringBuilder horariosTexto = new StringBuilder();
//            horariosTexto.append("Horarios del Dr. ")
//                    .append(medicoSELECCIONADO.getNombres())
//                    .append(" ")
//                    .append(medicoSELECCIONADO.getApellidoPaterno())
//                    .append("\n\n");
//
//            for (HorarioMedicoNuevoDTO horario : horarios) {
//                horariosTexto.append("‚Ä¢ ")
//                        .append(horario.getDiaSemana())
//                        .append(": ")
//                        .append(horario.getHoraEntrada().format(formateadorHora))
//                        .append(" - ")
//                        .append(horario.getHoraSalida().format(formateadorHora))
//                        .append("\n");
//            }
//
//            // Mostrar en el JTextArea
//            jTextAreaHorarios.setText(horariosTexto.toString());
//            jTextAreaHorarios.setCaretPosition(0); // Mover scroll al inicio
//
//        } catch (NegocioException ex) {
//            JOptionPane.showMessageDialog(this, "Error al cargar horarios: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
//        } catch (Exception e) {
//            JOptionPane.showMessageDialog(this, "Error inesperado al mostrar horarios", "Error", JOptionPane.ERROR_MESSAGE);
//        }
//    }



}
