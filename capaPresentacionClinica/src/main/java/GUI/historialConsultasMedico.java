/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI;

import BO.ConsultaBO;
import BO.PacienteBO;
import DTO.ConsultaViejaDTO;
import DTO.PacienteViejoDTO;
import Entidades.Cita;
import Entidades.Paciente;
import Exception.NegocioException;
import Mappers.PacienteMapper;
import configuracion.DependencyInjector;
import java.time.format.DateTimeFormatter;
import java.util.List;
import javax.swing.JOptionPane;

/**
 *
 * @author sonic
 */
public class historialConsultasMedico extends javax.swing.JFrame {

    private PacienteViejoDTO paciente;
    private PacienteBO pacienteBO = DependencyInjector.crearPacienteBO();
    private ConsultaBO consultaBO = DependencyInjector.crearConsultaBO();
    private dashBoardMedico VentanaMedico;
    private final PacienteMapper pacienteMapper = new PacienteMapper();
    private agendaDeCitas VentanaAgendaDeCitas;

    /**
     * Creates new form historialConsultasMedico
     */
    public historialConsultasMedico(PacienteViejoDTO paciente) {
        this.paciente = paciente;
        initComponents();

        this.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowOpened(java.awt.event.WindowEvent e) {
                try {
                    cargarConsultas();
                } catch (NegocioException ex) {
                    JOptionPane.showMessageDialog(historialConsultasMedico.this,
                            "Error al cargar consultas: " + ex.getMessage(), "Error",
                            JOptionPane.ERROR_MESSAGE);
                }
            }
        });
    }

    public historialConsultasMedico() {
        initComponents();
    }

    public historialConsultasMedico(dashBoardMedico VentanaMedico) {
        this.VentanaMedico = VentanaMedico;
    }

    public historialConsultasMedico(dashBoardMedico VentanaMedico, agendaDeCitas VentanaAgendaDeCitas) {
        this.VentanaMedico = VentanaMedico;
        this.VentanaAgendaDeCitas = VentanaAgendaDeCitas;
    }

    public void setVentanaMedico(dashBoardMedico VentanaMedico) {
        this.VentanaMedico = VentanaMedico;
    }

    public void setVentanaAgendaDeCitas(agendaDeCitas VentanaAgendaDeCitas) {
        this.VentanaAgendaDeCitas = VentanaAgendaDeCitas;
    }
    
    
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        botonVolver = new javax.swing.JButton();
        listConsultas = new java.awt.List();
        labelNombrePaciente = new javax.swing.JLabel();
        fieldPACIENTE = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(632, 757));
        setPreferredSize(new java.awt.Dimension(632, 757));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        jLabel2.setText("HISTORIAL DEL PACIENTE:");
        jLabel2.setToolTipText("");

        botonVolver.setText("Volver");
        botonVolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonVolverActionPerformed(evt);
            }
        });

        labelNombrePaciente.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        labelNombrePaciente.setToolTipText("");

        fieldPACIENTE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fieldPACIENTEActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(botonVolver)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(listConsultas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fieldPACIENTE, javax.swing.GroupLayout.PREFERRED_SIZE, 402, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(labelNombrePaciente)
                        .addGap(0, 438, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelNombrePaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(fieldPACIENTE, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(53, 53, 53)
                .addComponent(listConsultas, javax.swing.GroupLayout.PREFERRED_SIZE, 522, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 57, Short.MAX_VALUE)
                .addComponent(botonVolver, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botonVolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonVolverActionPerformed

    }//GEN-LAST:event_botonVolverActionPerformed

    private void fieldPACIENTEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fieldPACIENTEActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fieldPACIENTEActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(historialConsultasMedico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(historialConsultasMedico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(historialConsultasMedico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(historialConsultasMedico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new historialConsultasMedico().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonVolver;
    private javax.swing.JTextField fieldPACIENTE;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel labelNombrePaciente;
    private java.awt.List listConsultas;
    // End of variables declaration//GEN-END:variables
    private void cargarConsultas() throws NegocioException {
        try {
        Paciente pacienteSELECCIONADO = pacienteMapper.toEntityViejo(paciente);
        List<ConsultaViejaDTO> consultas = consultaBO.historialConsultasPaciente(pacienteSELECCIONADO);

        listConsultas.removeAll();

        if (consultas.isEmpty()) {
            listConsultas.add("-- No hay consultas registradas --");
            JOptionPane.showMessageDialog(this, 
                "El paciente no tiene consultas registradas", 
                "Historial Vacío", 
                JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        
        String nombre = paciente.getNombres();
        String apellidop = paciente.getApellidoPaterno();
        String apellidom = paciente.getApellidoMaterno();
        
        String nombrePaciente = (nombre + apellidop + apellidom);
        
        fieldPACIENTE.setText(nombrePaciente);
        

        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm");
        
        for (ConsultaViejaDTO consulta : consultas) {
            String item;
            
            if (consulta.getCita().getTipoCita() == Cita.TipoCita.EMERGENCIA) {
                item = String.format("ID: %d | %s | Dr. %s %s | Diagnóstico: %s | Tratamiento: %s | Folio: %s | Estado: %s",
                    consulta.getIdConsulta(),
                    consulta.getFechaHora().format(formatter),
                    consulta.getCita().getMedico().getNombres(),
                    consulta.getCita().getMedico().getApellidoPaterno(),
                    consulta.getDiagnostico(),
                    consulta.getTratamiento(),
                    consulta.getCita().getEmergencia().getFolio(),
                    consulta.getCita().getEstado().getDescripcion());
            } else {
                item = String.format("ID: %d | %s | Dr. %s %s | Diagnóstico: %s | Tratamiento: %s",
                    consulta.getIdConsulta(),
                    consulta.getFechaHora().format(formatter),
                    consulta.getCita().getMedico().getNombres(),
                    consulta.getCita().getMedico().getApellidoPaterno(),
                    consulta.getDiagnostico(),
                    consulta.getTratamiento());
            }
            
            listConsultas.add(item);
        }

    } catch (NegocioException ex) {
        JOptionPane.showMessageDialog(this, 
            "Error al cargar consultas: " + ex.getMessage(), 
            "Error", 
            JOptionPane.ERROR_MESSAGE);
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, 
            "Error inesperado: " + e.getMessage(), 
            "Error Crítico", 
            JOptionPane.ERROR_MESSAGE);
    }
}
}
